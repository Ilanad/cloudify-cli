tosca_definitions_version: cloudify_dsl_1_3

imports:
  - topology/topology.yaml


inputs:

  #############################
  # Provider specific Inputs
  #############################
  public_ip:
    type: string

  private_ip:
    type: string

  ssh_user:
    type: string

  ssh_key_filename:
    type: string

  agents_user:
    default: ubuntu
    type: string

  resources_prefix:
    default: ''
    type: string


dsl_definitions:
  exec_config: &exec_config
    hide_output:
      - running
    use_sudo: false
    fabric_env:
      user: { get_input: ssh_user }
      key_filename: { get_input: ssh_key_filename }
      host_string: { get_property: [manager_host, public_ip] }
      always_use_pty: true


######################################################################
# This is a simple blueprint specific node_type to allow us to define
# The public_ip of the machine is an accessible property of the host.
# By default, the `ip` property is the private ip.
######################################################################
node_types:
  cloudify.nodes.ManagerHost:
    derived_from: cloudify.nodes.Compute
    properties:
      public_ip:
        type: string
        default: { get_input: public_ip }


######################################################################
# These nodes comprise the manager's infrastructure and components
######################################################################
node_templates:
  manager_host:
    type: cloudify.nodes.ManagerHost
    properties:
      install_agent: false
      ip: { get_input: private_ip }

  manager_configuration:
    type: cloudify.nodes.MyCloudifyManager
    properties:
      ssh_user: { get_input: ssh_user }
      ssh_key_filename: { get_input: ssh_key_filename }
      cloudify:
        resources_prefix: { get_input: resources_prefix }

        cloudify_agent:
          min_workers: 0
          max_workers: 5
          remote_execution_port: 22
          user: { get_input: agents_user }
          broker_ip: { get_input: rabbitmq_endpoint_ip }
          broker_user: { get_input: rabbitmq_username }
          broker_pass: { get_input: rabbitmq_password }
          broker_ssl_enabled: { get_input: rabbitmq_ssl_enabled }
          broker_ssl_cert: { get_input: rabbitmq_cert_public }

        workflows:
          task_retries: -1  # this means forever
          task_retry_interval: 30

        policy_engine:
          start_timeout: 30

        # Declare rules for the default import resolver
        # which enables using the manager in offline mode.
        # The resolver replaces an import's http link with the local path
        # on the manager according to the matching rule's value.
        # If the resolver cannot read the import from the specified local path
        # (e.g. when the manager is not in offline mode),
        # it will fall back to the original http link.
        import_resolver:
          parameters:
            rules:
            - {'http://www.getcloudify.org/spec': 'http://localhost:53229/spec'}

        upload_resources:
          dsl_resources: { get_input: dsl_resources }

    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: components/manager/scripts/create_conf.py
            << : *exec_config
      cloudify.interfaces.validation:
        creation:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: components/manager/scripts/creation_validation.py
            << : *exec_config

    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            postconfigure:
              implementation: components/manager/scripts/set_manager_public_ip.py
              inputs:
                public_ip: { get_property: [manager_host, public_ip] }
      - type: cloudify.relationships.depends_on
        target: manager_resources

outputs:
  manager_ip:
    value: { get_input: public_ip }
  private_ip:
    value: { get_input: private_ip }
